// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: pkg/inference/proto/inference.proto

package torchserve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InferenceAPIsService_Ping_FullMethodName               = "/org.pytorch.serve.grpc.inference.InferenceAPIsService/Ping"
	InferenceAPIsService_Predictions_FullMethodName        = "/org.pytorch.serve.grpc.inference.InferenceAPIsService/Predictions"
	InferenceAPIsService_StreamPredictions_FullMethodName  = "/org.pytorch.serve.grpc.inference.InferenceAPIsService/StreamPredictions"
	InferenceAPIsService_StreamPredictions2_FullMethodName = "/org.pytorch.serve.grpc.inference.InferenceAPIsService/StreamPredictions2"
)

// InferenceAPIsServiceClient is the client API for InferenceAPIsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InferenceAPIsServiceClient interface {
	// Check health status of the TorchServe server.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TorchServeHealthResponse, error)
	// Predictions entry point to get inference using default model version.
	Predictions(ctx context.Context, in *PredictionsRequest, opts ...grpc.CallOption) (*PredictionResponse, error)
	// Streaming response for an inference request.
	StreamPredictions(ctx context.Context, in *PredictionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PredictionResponse], error)
	// Bi-direction streaming inference and response.
	StreamPredictions2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PredictionsRequest, PredictionResponse], error)
}

type inferenceAPIsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceAPIsServiceClient(cc grpc.ClientConnInterface) InferenceAPIsServiceClient {
	return &inferenceAPIsServiceClient{cc}
}

func (c *inferenceAPIsServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TorchServeHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TorchServeHealthResponse)
	err := c.cc.Invoke(ctx, InferenceAPIsService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceAPIsServiceClient) Predictions(ctx context.Context, in *PredictionsRequest, opts ...grpc.CallOption) (*PredictionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictionResponse)
	err := c.cc.Invoke(ctx, InferenceAPIsService_Predictions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceAPIsServiceClient) StreamPredictions(ctx context.Context, in *PredictionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PredictionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InferenceAPIsService_ServiceDesc.Streams[0], InferenceAPIsService_StreamPredictions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PredictionsRequest, PredictionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceAPIsService_StreamPredictionsClient = grpc.ServerStreamingClient[PredictionResponse]

func (c *inferenceAPIsServiceClient) StreamPredictions2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PredictionsRequest, PredictionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InferenceAPIsService_ServiceDesc.Streams[1], InferenceAPIsService_StreamPredictions2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PredictionsRequest, PredictionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceAPIsService_StreamPredictions2Client = grpc.BidiStreamingClient[PredictionsRequest, PredictionResponse]

// InferenceAPIsServiceServer is the server API for InferenceAPIsService service.
// All implementations must embed UnimplementedInferenceAPIsServiceServer
// for forward compatibility.
type InferenceAPIsServiceServer interface {
	// Check health status of the TorchServe server.
	Ping(context.Context, *emptypb.Empty) (*TorchServeHealthResponse, error)
	// Predictions entry point to get inference using default model version.
	Predictions(context.Context, *PredictionsRequest) (*PredictionResponse, error)
	// Streaming response for an inference request.
	StreamPredictions(*PredictionsRequest, grpc.ServerStreamingServer[PredictionResponse]) error
	// Bi-direction streaming inference and response.
	StreamPredictions2(grpc.BidiStreamingServer[PredictionsRequest, PredictionResponse]) error
	mustEmbedUnimplementedInferenceAPIsServiceServer()
}

// UnimplementedInferenceAPIsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInferenceAPIsServiceServer struct{}

func (UnimplementedInferenceAPIsServiceServer) Ping(context.Context, *emptypb.Empty) (*TorchServeHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedInferenceAPIsServiceServer) Predictions(context.Context, *PredictionsRequest) (*PredictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predictions not implemented")
}
func (UnimplementedInferenceAPIsServiceServer) StreamPredictions(*PredictionsRequest, grpc.ServerStreamingServer[PredictionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPredictions not implemented")
}
func (UnimplementedInferenceAPIsServiceServer) StreamPredictions2(grpc.BidiStreamingServer[PredictionsRequest, PredictionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPredictions2 not implemented")
}
func (UnimplementedInferenceAPIsServiceServer) mustEmbedUnimplementedInferenceAPIsServiceServer() {}
func (UnimplementedInferenceAPIsServiceServer) testEmbeddedByValue()                              {}

// UnsafeInferenceAPIsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceAPIsServiceServer will
// result in compilation errors.
type UnsafeInferenceAPIsServiceServer interface {
	mustEmbedUnimplementedInferenceAPIsServiceServer()
}

func RegisterInferenceAPIsServiceServer(s grpc.ServiceRegistrar, srv InferenceAPIsServiceServer) {
	// If the following call pancis, it indicates UnimplementedInferenceAPIsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InferenceAPIsService_ServiceDesc, srv)
}

func _InferenceAPIsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceAPIsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InferenceAPIsService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceAPIsServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InferenceAPIsService_Predictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceAPIsServiceServer).Predictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InferenceAPIsService_Predictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceAPIsServiceServer).Predictions(ctx, req.(*PredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InferenceAPIsService_StreamPredictions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PredictionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceAPIsServiceServer).StreamPredictions(m, &grpc.GenericServerStream[PredictionsRequest, PredictionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceAPIsService_StreamPredictionsServer = grpc.ServerStreamingServer[PredictionResponse]

func _InferenceAPIsService_StreamPredictions2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InferenceAPIsServiceServer).StreamPredictions2(&grpc.GenericServerStream[PredictionsRequest, PredictionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InferenceAPIsService_StreamPredictions2Server = grpc.BidiStreamingServer[PredictionsRequest, PredictionResponse]

// InferenceAPIsService_ServiceDesc is the grpc.ServiceDesc for InferenceAPIsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InferenceAPIsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.pytorch.serve.grpc.inference.InferenceAPIsService",
	HandlerType: (*InferenceAPIsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _InferenceAPIsService_Ping_Handler,
		},
		{
			MethodName: "Predictions",
			Handler:    _InferenceAPIsService_Predictions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPredictions",
			Handler:       _InferenceAPIsService_StreamPredictions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPredictions2",
			Handler:       _InferenceAPIsService_StreamPredictions2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/inference/proto/inference.proto",
}
